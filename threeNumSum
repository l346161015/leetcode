class Solution:
  2     def threeSum(self,nums):
  3         '''
  4         :type nums: List[int]
  5         :rtype: List[List[int]]
  6         '''
  7         #定义一个空列表，并将列表还原
  8         result = []
  9         nums.sort()
 10         #原列表长度
 11         ly_len = len(nums)
 12         #遍历所有
 13         for i in range(ly_len-1):
 14             for j in range(i+1,ly_len):
 15                 if -(nums[i]+nums[j]) in nums[j+1:]:
 16                     ly = [nums[i],nums[j],-(nums[i]+nums[j])]
 17                     if ly not in result:
 18                         result.append(ly)
 19         return result
 20 
 21     def main(self):  #操作函数
 22         print('-'*40)
            print('1.threeSum')
 25         print('2.thSum')
 27         print('-'*40)
 28         num = int(input(''))
 29         return self.Factory(num)
 30 
 31     def Factory(self,num):  #工厂函数，方便解耦
 32         print('请输入一串数组，输入exit结束')
 33         a_list = list(iter(input,'exit'))
 34         b_list = []
 35         for i in a_list:
 36             n = int(i)
 37             b_list.append(n)
 38         if num==1:
 39             return self.threeSum(b_list)
 40         elif num==2:
 41             return self.thSum(b_list)
 42 
 43     def thSum(self,nums):  #改进的三数之和算法，固定一个数后前后逼近寻找另外两个数
 44         #空列表，排序
 45         res = []
 46         nums.sort()
          #固定一个数，另外两个数来匹配，凑0
 48         for i in range(0,len(nums)):
 49         #排序后可能un在相等的连续数，【-1，,1,0】,continue下次操作
 50             if i>0 and nums[i]==nums[i-1]:
 51                 continue
 52         #另外两个数之和为target
 53             target = 0 - nums[i]
 54         #从后续列表切片两端向中间逼近
 55             start,end = i+1,len(nums)-1
 56             while start < end:
 57                 if nums[start] + nums[end] > target:#如果大于目标值，尾部索引-1
 58                     end -= 1
 59                 elif nums[start] + nums[end] < target:#如果小于目标值，前部索引+1
 60                     start += 1
 61                 else:
 62                     res.append((nums[i],nums[start],nums[end]))
 63                     end -= 1
 64                     start -= 1
                     while start < end and nums[end] == nums[end + 1]:  去除重复值
 66                         end -= 1
 67                     while start < end and nums[end] == nums[start - 1]:
 68                         start += 1
 69         return res
 70 
 71 
 72 
 73 abc = Solution()
 74 sloution = abc.main()
 75 print(sloution)



